// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Patient {
    id               String           @id @default(uuid())
    name             String
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    email            String
    civilStatus      CivilStatus      @map("civil_status")
    profession       String
    dateOfBirth      DateTime         @map("date_of_birth")
    firstSession     DateTime         @map("first_session")
    sessionFrequency SessionFrequency @map("session_frequency")
    sessionDuration  Float            @map("session_duration")
    // user             User             @relation(fields: [userId], references: [id])
    // userId           String
    finance          Finance?
    appointment      Appointment?

    @@index([name])
}

enum CivilStatus {
    Married
    Single
    divorced
    Widow
}

enum SessionFrequency {
    Weekly
    Biweely
    Monthly
}

model Finance {
    patient        Patient @relation(fields: [patientId], references: [id])
    patientId      String  @map("patient_id")
    value          Float
    paymentUpfront Boolean @map("payment_upfront")

    @@id([patientId])
}

model Appointment {
    id                  String              @id @default(uuid())
    patient             Patient             @relation(fields: [patientId], references: [id])
    patientId           String              @unique @map("patient_id")
    paymentUpfront      Boolean             @map("payment_upfront")
    appointmentDate     DateTime            @map("appointment_date")
    nextAppointmentDate DateTime            @map("nextAppointment_date")
    isPresent           Boolean             @map("is_present")
    duration            Float
    time                BigInt
    dayOfWeek           WeekDays            @map("day_of_week")
    appointmentPayment  AppointmentPayment?
}

enum WeekDays {
    Sunday
    Monday
    Tuesday
    Weednesday
    Thursday
    Friday
    Saturday
}

model AppointmentPayment {
    id            String      @id @default(uuid())
    appointment   Appointment @relation(fields: [appointmentId], references: [id])
    appointmentId String      @unique @map("appointmentId")
    value         Float
    paid          Boolean
    paid_at       DateTime?   @map("paidAt")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // patients      Patient[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
